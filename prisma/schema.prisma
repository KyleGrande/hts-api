generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [postgis, uuid_ossp(map: "uuid-ossp", schema: "extensions")]
  schemas     = [ "public"]

}

model User {
  id                 Int           @id @default(autoincrement())
  email              String        @unique
  password           String
  jwt                String
  name               String?
  createdAt          DateTime      @default(now())
  balance            Decimal       @default(0.00) @db.Money
  listings           Listing[]
  requests           Request[]
  boughtTransactions Transaction[] @relation("TransactionBuyer")
  soldTransactions   Transaction[] @relation("TransactionSeller")
  
  @@schema("public")
}


model Listing {
  id        Int                      @id @unique @default(autoincrement())
  userid    Int
  status    Status
  starttime DateTime
  createdAt DateTime                 @default(now())
  price     Decimal                  @db.Decimal(10, 2)
  region    String?
  subregion String?
  location  Unsupported("geometry")?
  user      User                     @relation(fields: [userid], references: [id], onDelete: Cascade)
  match     Match?

  @@index([location], map: "location_idx", type: Gist)
    @@schema ("public")

}

model Request {
  id            Int                      @id @unique @default(autoincrement())
  userid        Int
  status        Status
  type          RequestType
  createdAt     DateTime                 @default(now())
  starttime     DateTime
  departuretime DateTime
  relist        Boolean                  @default(true)
  location      Unsupported("geometry")?
  bid           Decimal                  @db.Decimal(10, 2)
  match         Match?
  user          User                     @relation(fields: [userid], references: [id], onDelete: Cascade)
  @@schema ("public")

}

model Match {
  id           Int           @id @unique @default(autoincrement())
  requestId    Int           @unique
  listingId    Int           @unique
  matchedDate  DateTime      @default(now())
  distance     Float
  listing      Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  request      Request       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  transactions Transaction[]
    @@schema ("public")

}

model Transaction {
  id          Int             @id @unique @default(autoincrement())
  amount      Decimal         @db.Decimal(10, 2)
  type        TransactionType
  paymentType PaymentType
  sellerId    Int
  buyerId     Int
  matchId     Int
  createdAt   DateTime        @default(now())
  buyer       User            @relation("TransactionBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  match       Match           @relation(fields: [matchId], references: [id], onDelete: Cascade)
  seller      User            @relation("TransactionSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  @@schema ("public")

}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
    @@schema ("public")

}

enum Status {
  Matched
  Completed
  Cancelled
  Searching
    @@schema ("public")

}

enum ListingStatus {
  Available
  Occupied
  Matched
  Unavailable
  @@schema ("public")

}

enum RequestStatus {
  Completed
  Cancelled
  Matched
  Searching
    @@schema ("public")

}

enum RequestType {
  Instant
  Scheduled
  Bid
    @@schema ("public")

}

enum TransactionType {
  Payment
  Refund
    @@schema ("public")

}

enum PaymentType {
  CreditCard
  PayPal
  ApplePay
  BankTransfer
  AccountBalance
    @@schema ("public")

}
