// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]

  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis]

}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String?
  balance      Decimal       @db.Money @default(0.00)
  requests     Request[]
  parkingSpots ParkingSpot[]
  soldTransactions Transaction[] @relation("TransactionSeller")
  boughtTransactions Transaction[] @relation("TransactionBuyer")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Decimal  @db.Decimal(10, 2)
  type      String
  sellerId  Int
  buyerId   Int
  createdAt DateTime @default(now())
  status   String
  requestId Int
  parkingSpotId Int
  parkingSpot  ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
  Request  Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  seller    User     @relation("TransactionSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer     User     @relation("TransactionBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
}

model ParkingSpot {
  id     Int    @id @default(autoincrement())
  userid Int
  status String
  available Boolean
  departuretime DateTime
  createdat DateTime @default(now())
  cost Decimal @db.Decimal(10, 2)
  type String
  location Unsupported("geometry(Point, 4326)")? @default(dbgenerated("null"))
  @@index([location], name: "location_idx", type: Gist)
  user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Request {
  id            Int      @id @default(autoincrement())
  userId        Int
  status        String
  createdAt     DateTime @default(now())
  arrivalTime   DateTime
  departureTime DateTime
  bid           Decimal  @db.Decimal(10, 2)
  type          String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
}
